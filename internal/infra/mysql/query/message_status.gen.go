// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ai_chat/internal/infra/mysql/model"
)

func newMessageStatus(db *gorm.DB, opts ...gen.DOOption) messageStatus {
	_messageStatus := messageStatus{}

	_messageStatus.messageStatusDo.UseDB(db, opts...)
	_messageStatus.messageStatusDo.UseModel(&model.MessageStatus{})

	tableName := _messageStatus.messageStatusDo.TableName()
	_messageStatus.ALL = field.NewAsterisk(tableName)
	_messageStatus.ID = field.NewInt64(tableName, "id")
	_messageStatus.MessageID = field.NewInt64(tableName, "message_id")
	_messageStatus.UserID = field.NewInt64(tableName, "user_id")
	_messageStatus.Status = field.NewString(tableName, "status")
	_messageStatus.ReadAt = field.NewTime(tableName, "read_at")

	_messageStatus.fillFieldMap()

	return _messageStatus
}

type messageStatus struct {
	messageStatusDo messageStatusDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	MessageID field.Int64  // 消息ID
	UserID    field.Int64  // 用户ID
	Status    field.String // 消息状态
	ReadAt    field.Time   // 阅读时间

	fieldMap map[string]field.Expr
}

func (m messageStatus) Table(newTableName string) *messageStatus {
	m.messageStatusDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageStatus) As(alias string) *messageStatus {
	m.messageStatusDo.DO = *(m.messageStatusDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageStatus) updateTableName(table string) *messageStatus {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MessageID = field.NewInt64(table, "message_id")
	m.UserID = field.NewInt64(table, "user_id")
	m.Status = field.NewString(table, "status")
	m.ReadAt = field.NewTime(table, "read_at")

	m.fillFieldMap()

	return m
}

func (m *messageStatus) WithContext(ctx context.Context) *messageStatusDo {
	return m.messageStatusDo.WithContext(ctx)
}

func (m messageStatus) TableName() string { return m.messageStatusDo.TableName() }

func (m messageStatus) Alias() string { return m.messageStatusDo.Alias() }

func (m messageStatus) Columns(cols ...field.Expr) gen.Columns {
	return m.messageStatusDo.Columns(cols...)
}

func (m *messageStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageStatus) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["message_id"] = m.MessageID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["status"] = m.Status
	m.fieldMap["read_at"] = m.ReadAt
}

func (m messageStatus) clone(db *gorm.DB) messageStatus {
	m.messageStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageStatus) replaceDB(db *gorm.DB) messageStatus {
	m.messageStatusDo.ReplaceDB(db)
	return m
}

type messageStatusDo struct{ gen.DO }

func (m messageStatusDo) Debug() *messageStatusDo {
	return m.withDO(m.DO.Debug())
}

func (m messageStatusDo) WithContext(ctx context.Context) *messageStatusDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageStatusDo) ReadDB() *messageStatusDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageStatusDo) WriteDB() *messageStatusDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageStatusDo) Session(config *gorm.Session) *messageStatusDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageStatusDo) Clauses(conds ...clause.Expression) *messageStatusDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageStatusDo) Returning(value interface{}, columns ...string) *messageStatusDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageStatusDo) Not(conds ...gen.Condition) *messageStatusDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageStatusDo) Or(conds ...gen.Condition) *messageStatusDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageStatusDo) Select(conds ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageStatusDo) Where(conds ...gen.Condition) *messageStatusDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageStatusDo) Order(conds ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageStatusDo) Distinct(cols ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageStatusDo) Omit(cols ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageStatusDo) Join(table schema.Tabler, on ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageStatusDo) Group(cols ...field.Expr) *messageStatusDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageStatusDo) Having(conds ...gen.Condition) *messageStatusDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageStatusDo) Limit(limit int) *messageStatusDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageStatusDo) Offset(offset int) *messageStatusDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageStatusDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageStatusDo) Unscoped() *messageStatusDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageStatusDo) Create(values ...*model.MessageStatus) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageStatusDo) CreateInBatches(values []*model.MessageStatus, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageStatusDo) Save(values ...*model.MessageStatus) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageStatusDo) First() (*model.MessageStatus, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageStatus), nil
	}
}

func (m messageStatusDo) Take() (*model.MessageStatus, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageStatus), nil
	}
}

func (m messageStatusDo) Last() (*model.MessageStatus, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageStatus), nil
	}
}

func (m messageStatusDo) Find() ([]*model.MessageStatus, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageStatus), err
}

func (m messageStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageStatus, err error) {
	buf := make([]*model.MessageStatus, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageStatusDo) FindInBatches(result *[]*model.MessageStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageStatusDo) Attrs(attrs ...field.AssignExpr) *messageStatusDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageStatusDo) Assign(attrs ...field.AssignExpr) *messageStatusDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageStatusDo) Joins(fields ...field.RelationField) *messageStatusDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageStatusDo) Preload(fields ...field.RelationField) *messageStatusDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageStatusDo) FirstOrInit() (*model.MessageStatus, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageStatus), nil
	}
}

func (m messageStatusDo) FirstOrCreate() (*model.MessageStatus, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageStatus), nil
	}
}

func (m messageStatusDo) FindByPage(offset int, limit int) (result []*model.MessageStatus, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageStatusDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageStatusDo) Delete(models ...*model.MessageStatus) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageStatusDo) withDO(do gen.Dao) *messageStatusDo {
	m.DO = *do.(*gen.DO)
	return m
}
