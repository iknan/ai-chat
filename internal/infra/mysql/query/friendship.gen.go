// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ai_chat/internal/infra/mysql/model"
)

func newFriendship(db *gorm.DB, opts ...gen.DOOption) friendship {
	_friendship := friendship{}

	_friendship.friendshipDo.UseDB(db, opts...)
	_friendship.friendshipDo.UseModel(&model.Friendship{})

	tableName := _friendship.friendshipDo.TableName()
	_friendship.ALL = field.NewAsterisk(tableName)
	_friendship.ID = field.NewInt64(tableName, "id")
	_friendship.User1ID = field.NewInt64(tableName, "user1_id")
	_friendship.User2ID = field.NewInt64(tableName, "user2_id")
	_friendship.Status = field.NewString(tableName, "status")
	_friendship.CreatedAt = field.NewTime(tableName, "created_at")

	_friendship.fillFieldMap()

	return _friendship
}

type friendship struct {
	friendshipDo friendshipDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	User1ID   field.Int64  // 用户1 ID
	User2ID   field.Int64  // 用户2 ID
	Status    field.String // 好友状态
	CreatedAt field.Time   // 添加时间

	fieldMap map[string]field.Expr
}

func (f friendship) Table(newTableName string) *friendship {
	f.friendshipDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendship) As(alias string) *friendship {
	f.friendshipDo.DO = *(f.friendshipDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendship) updateTableName(table string) *friendship {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.User1ID = field.NewInt64(table, "user1_id")
	f.User2ID = field.NewInt64(table, "user2_id")
	f.Status = field.NewString(table, "status")
	f.CreatedAt = field.NewTime(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *friendship) WithContext(ctx context.Context) *friendshipDo {
	return f.friendshipDo.WithContext(ctx)
}

func (f friendship) TableName() string { return f.friendshipDo.TableName() }

func (f friendship) Alias() string { return f.friendshipDo.Alias() }

func (f friendship) Columns(cols ...field.Expr) gen.Columns { return f.friendshipDo.Columns(cols...) }

func (f *friendship) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendship) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user1_id"] = f.User1ID
	f.fieldMap["user2_id"] = f.User2ID
	f.fieldMap["status"] = f.Status
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f friendship) clone(db *gorm.DB) friendship {
	f.friendshipDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendship) replaceDB(db *gorm.DB) friendship {
	f.friendshipDo.ReplaceDB(db)
	return f
}

type friendshipDo struct{ gen.DO }

func (f friendshipDo) Debug() *friendshipDo {
	return f.withDO(f.DO.Debug())
}

func (f friendshipDo) WithContext(ctx context.Context) *friendshipDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendshipDo) ReadDB() *friendshipDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendshipDo) WriteDB() *friendshipDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendshipDo) Session(config *gorm.Session) *friendshipDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendshipDo) Clauses(conds ...clause.Expression) *friendshipDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendshipDo) Returning(value interface{}, columns ...string) *friendshipDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendshipDo) Not(conds ...gen.Condition) *friendshipDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendshipDo) Or(conds ...gen.Condition) *friendshipDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendshipDo) Select(conds ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendshipDo) Where(conds ...gen.Condition) *friendshipDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendshipDo) Order(conds ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendshipDo) Distinct(cols ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendshipDo) Omit(cols ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendshipDo) Join(table schema.Tabler, on ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendshipDo) LeftJoin(table schema.Tabler, on ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendshipDo) RightJoin(table schema.Tabler, on ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendshipDo) Group(cols ...field.Expr) *friendshipDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendshipDo) Having(conds ...gen.Condition) *friendshipDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendshipDo) Limit(limit int) *friendshipDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendshipDo) Offset(offset int) *friendshipDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendshipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *friendshipDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendshipDo) Unscoped() *friendshipDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendshipDo) Create(values ...*model.Friendship) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendshipDo) CreateInBatches(values []*model.Friendship, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendshipDo) Save(values ...*model.Friendship) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendshipDo) First() (*model.Friendship, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) Take() (*model.Friendship, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) Last() (*model.Friendship, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) Find() ([]*model.Friendship, error) {
	result, err := f.DO.Find()
	return result.([]*model.Friendship), err
}

func (f friendshipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Friendship, err error) {
	buf := make([]*model.Friendship, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendshipDo) FindInBatches(result *[]*model.Friendship, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendshipDo) Attrs(attrs ...field.AssignExpr) *friendshipDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendshipDo) Assign(attrs ...field.AssignExpr) *friendshipDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendshipDo) Joins(fields ...field.RelationField) *friendshipDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendshipDo) Preload(fields ...field.RelationField) *friendshipDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendshipDo) FirstOrInit() (*model.Friendship, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) FirstOrCreate() (*model.Friendship, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) FindByPage(offset int, limit int) (result []*model.Friendship, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendshipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendshipDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendshipDo) Delete(models ...*model.Friendship) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendshipDo) withDO(do gen.Dao) *friendshipDo {
	f.DO = *do.(*gen.DO)
	return f
}
