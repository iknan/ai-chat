// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ai_chat/internal/infra/mysql/model"
)

func newConversationMember(db *gorm.DB, opts ...gen.DOOption) conversationMember {
	_conversationMember := conversationMember{}

	_conversationMember.conversationMemberDo.UseDB(db, opts...)
	_conversationMember.conversationMemberDo.UseModel(&model.ConversationMember{})

	tableName := _conversationMember.conversationMemberDo.TableName()
	_conversationMember.ALL = field.NewAsterisk(tableName)
	_conversationMember.ID = field.NewInt64(tableName, "id")
	_conversationMember.ConversationID = field.NewInt64(tableName, "conversation_id")
	_conversationMember.UserID = field.NewInt64(tableName, "user_id")
	_conversationMember.Role = field.NewString(tableName, "role")
	_conversationMember.JoinedAt = field.NewTime(tableName, "joined_at")

	_conversationMember.fillFieldMap()

	return _conversationMember
}

type conversationMember struct {
	conversationMemberDo conversationMemberDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键ID
	ConversationID field.Int64  // 会话ID
	UserID         field.Int64  // 用户ID
	Role           field.String // 用户在群组中的角色
	JoinedAt       field.Time   // 加入时间

	fieldMap map[string]field.Expr
}

func (c conversationMember) Table(newTableName string) *conversationMember {
	c.conversationMemberDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c conversationMember) As(alias string) *conversationMember {
	c.conversationMemberDo.DO = *(c.conversationMemberDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *conversationMember) updateTableName(table string) *conversationMember {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ConversationID = field.NewInt64(table, "conversation_id")
	c.UserID = field.NewInt64(table, "user_id")
	c.Role = field.NewString(table, "role")
	c.JoinedAt = field.NewTime(table, "joined_at")

	c.fillFieldMap()

	return c
}

func (c *conversationMember) WithContext(ctx context.Context) *conversationMemberDo {
	return c.conversationMemberDo.WithContext(ctx)
}

func (c conversationMember) TableName() string { return c.conversationMemberDo.TableName() }

func (c conversationMember) Alias() string { return c.conversationMemberDo.Alias() }

func (c conversationMember) Columns(cols ...field.Expr) gen.Columns {
	return c.conversationMemberDo.Columns(cols...)
}

func (c *conversationMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *conversationMember) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["conversation_id"] = c.ConversationID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["role"] = c.Role
	c.fieldMap["joined_at"] = c.JoinedAt
}

func (c conversationMember) clone(db *gorm.DB) conversationMember {
	c.conversationMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c conversationMember) replaceDB(db *gorm.DB) conversationMember {
	c.conversationMemberDo.ReplaceDB(db)
	return c
}

type conversationMemberDo struct{ gen.DO }

func (c conversationMemberDo) Debug() *conversationMemberDo {
	return c.withDO(c.DO.Debug())
}

func (c conversationMemberDo) WithContext(ctx context.Context) *conversationMemberDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c conversationMemberDo) ReadDB() *conversationMemberDo {
	return c.Clauses(dbresolver.Read)
}

func (c conversationMemberDo) WriteDB() *conversationMemberDo {
	return c.Clauses(dbresolver.Write)
}

func (c conversationMemberDo) Session(config *gorm.Session) *conversationMemberDo {
	return c.withDO(c.DO.Session(config))
}

func (c conversationMemberDo) Clauses(conds ...clause.Expression) *conversationMemberDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c conversationMemberDo) Returning(value interface{}, columns ...string) *conversationMemberDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c conversationMemberDo) Not(conds ...gen.Condition) *conversationMemberDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c conversationMemberDo) Or(conds ...gen.Condition) *conversationMemberDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c conversationMemberDo) Select(conds ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c conversationMemberDo) Where(conds ...gen.Condition) *conversationMemberDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c conversationMemberDo) Order(conds ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c conversationMemberDo) Distinct(cols ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c conversationMemberDo) Omit(cols ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c conversationMemberDo) Join(table schema.Tabler, on ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c conversationMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c conversationMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c conversationMemberDo) Group(cols ...field.Expr) *conversationMemberDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c conversationMemberDo) Having(conds ...gen.Condition) *conversationMemberDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c conversationMemberDo) Limit(limit int) *conversationMemberDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c conversationMemberDo) Offset(offset int) *conversationMemberDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c conversationMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *conversationMemberDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c conversationMemberDo) Unscoped() *conversationMemberDo {
	return c.withDO(c.DO.Unscoped())
}

func (c conversationMemberDo) Create(values ...*model.ConversationMember) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c conversationMemberDo) CreateInBatches(values []*model.ConversationMember, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c conversationMemberDo) Save(values ...*model.ConversationMember) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c conversationMemberDo) First() (*model.ConversationMember, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConversationMember), nil
	}
}

func (c conversationMemberDo) Take() (*model.ConversationMember, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConversationMember), nil
	}
}

func (c conversationMemberDo) Last() (*model.ConversationMember, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConversationMember), nil
	}
}

func (c conversationMemberDo) Find() ([]*model.ConversationMember, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConversationMember), err
}

func (c conversationMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConversationMember, err error) {
	buf := make([]*model.ConversationMember, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c conversationMemberDo) FindInBatches(result *[]*model.ConversationMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c conversationMemberDo) Attrs(attrs ...field.AssignExpr) *conversationMemberDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c conversationMemberDo) Assign(attrs ...field.AssignExpr) *conversationMemberDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c conversationMemberDo) Joins(fields ...field.RelationField) *conversationMemberDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c conversationMemberDo) Preload(fields ...field.RelationField) *conversationMemberDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c conversationMemberDo) FirstOrInit() (*model.ConversationMember, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConversationMember), nil
	}
}

func (c conversationMemberDo) FirstOrCreate() (*model.ConversationMember, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConversationMember), nil
	}
}

func (c conversationMemberDo) FindByPage(offset int, limit int) (result []*model.ConversationMember, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c conversationMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c conversationMemberDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c conversationMemberDo) Delete(models ...*model.ConversationMember) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *conversationMemberDo) withDO(do gen.Dao) *conversationMemberDo {
	c.DO = *do.(*gen.DO)
	return c
}
